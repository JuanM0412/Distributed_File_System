# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import name_node_pb2 as name__node__pb2

GRPC_GENERATED_VERSION = '1.66.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in name_node_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.')


class NameNodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
            '/nameNode.NameNodeService/Register',
            request_serializer=name__node__pb2.RegisterRequest.SerializeToString,
            response_deserializer=name__node__pb2.RegisterResponse.FromString,
            _registered_method=True)
        self.GetDataNodesForUpload = channel.unary_unary(
            '/nameNode.NameNodeService/GetDataNodesForUpload',
            request_serializer=name__node__pb2.DataNodesUploadRequest.SerializeToString,
            response_deserializer=name__node__pb2.DataNodesResponse.FromString,
            _registered_method=True)
        self.GetDataNodesForDownload = channel.unary_unary(
            '/nameNode.NameNodeService/GetDataNodesForDownload',
            request_serializer=name__node__pb2.DataNodesDownloadRequest.SerializeToString,
            response_deserializer=name__node__pb2.DataNodesResponse.FromString,
            _registered_method=True)
        self.AddUser = channel.unary_unary(
            '/nameNode.NameNodeService/AddUser',
            request_serializer=name__node__pb2.AddUserRequest.SerializeToString,
            response_deserializer=name__node__pb2.AddUserResponse.FromString,
            _registered_method=True)
        self.ValidateUser = channel.unary_unary(
            '/nameNode.NameNodeService/ValidateUser',
            request_serializer=name__node__pb2.ValidateUserRequest.SerializeToString,
            response_deserializer=name__node__pb2.ValidateUserResponse.FromString,
            _registered_method=True)


class NameNodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """DataNodes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataNodesForUpload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDataNodesForDownload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Users
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Register': grpc.unary_unary_rpc_method_handler(
            servicer.Register,
            request_deserializer=name__node__pb2.RegisterRequest.FromString,
            response_serializer=name__node__pb2.RegisterResponse.SerializeToString,
        ),
        'GetDataNodesForUpload': grpc.unary_unary_rpc_method_handler(
            servicer.GetDataNodesForUpload,
            request_deserializer=name__node__pb2.DataNodesUploadRequest.FromString,
            response_serializer=name__node__pb2.DataNodesResponse.SerializeToString,
        ),
        'GetDataNodesForDownload': grpc.unary_unary_rpc_method_handler(
            servicer.GetDataNodesForDownload,
            request_deserializer=name__node__pb2.DataNodesDownloadRequest.FromString,
            response_serializer=name__node__pb2.DataNodesResponse.SerializeToString,
        ),
        'AddUser': grpc.unary_unary_rpc_method_handler(
            servicer.AddUser,
            request_deserializer=name__node__pb2.AddUserRequest.FromString,
            response_serializer=name__node__pb2.AddUserResponse.SerializeToString,
        ),
        'ValidateUser': grpc.unary_unary_rpc_method_handler(
            servicer.ValidateUser,
            request_deserializer=name__node__pb2.ValidateUserRequest.FromString,
            response_serializer=name__node__pb2.ValidateUserResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'nameNode.NameNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        'nameNode.NameNodeService', rpc_method_handlers)

 # This class is part of an EXPERIMENTAL API.


class NameNodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
                 target,
                 options=(),
                 channel_credentials=None,
                 call_credentials=None,
                 insecure=False,
                 compression=None,
                 wait_for_ready=None,
                 timeout=None,
                 metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nameNode.NameNodeService/Register',
            name__node__pb2.RegisterRequest.SerializeToString,
            name__node__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataNodesForUpload(request,
                              target,
                              options=(),
                              channel_credentials=None,
                              call_credentials=None,
                              insecure=False,
                              compression=None,
                              wait_for_ready=None,
                              timeout=None,
                              metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nameNode.NameNodeService/GetDataNodesForUpload',
            name__node__pb2.DataNodesUploadRequest.SerializeToString,
            name__node__pb2.DataNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDataNodesForDownload(request,
                                target,
                                options=(),
                                channel_credentials=None,
                                call_credentials=None,
                                insecure=False,
                                compression=None,
                                wait_for_ready=None,
                                timeout=None,
                                metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nameNode.NameNodeService/GetDataNodesForDownload',
            name__node__pb2.DataNodesDownloadRequest.SerializeToString,
            name__node__pb2.DataNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddUser(request,
                target,
                options=(),
                channel_credentials=None,
                call_credentials=None,
                insecure=False,
                compression=None,
                wait_for_ready=None,
                timeout=None,
                metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nameNode.NameNodeService/AddUser',
            name__node__pb2.AddUserRequest.SerializeToString,
            name__node__pb2.AddUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateUser(request,
                     target,
                     options=(),
                     channel_credentials=None,
                     call_credentials=None,
                     insecure=False,
                     compression=None,
                     wait_for_ready=None,
                     timeout=None,
                     metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/nameNode.NameNodeService/ValidateUser',
            name__node__pb2.ValidateUserRequest.SerializeToString,
            name__node__pb2.ValidateUserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
